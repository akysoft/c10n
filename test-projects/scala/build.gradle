/*
 * Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'

sourceCompatibility = '1.6'
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories{
  mavenCentral()
  maven{
    url "https://raw.github.com/rodionmoiseev/c10n/master/c10n-mvn-repo/releases"
  }
}

configurations{
  scalaAPI
  compile.extendsFrom scalaAPI
}

dependencies {
  compile group: 'c10n', name: 'c10n-core', version: '1.0-rc2'

  // Libraries needed to run the scala tools
  scalaTools 'org.scala-lang:scala-compiler:2.9.1'
  scalaTools 'org.scala-lang:scala-library:2.9.1'

  // Libraries needed for scala api
  scalaAPI 'org.scala-lang:scala-library:2.9.1'
}

task show << {
  configurations.scalaTools.files.each { println it }
}

def licenseFile = "${project.projectDir}/../../master/license-preamble.txt"

def scalaLibVersion = '2.9.1'
def scalaLibName = 'gradle-scala'
def scalaCompilerLib = "${scalaLibName}-compiler-${scalaLibVersion}"
def scalaAPILib = "${scalaLibName}-library-${scalaLibVersion}"

idea.project.ipr{
  withXml { provider ->
      //Setup Scala Facet
      def scalacSettingsComp = provider.node.appendNode('component')
      scalacSettingsComp.@name = 'ScalacSettings'
      ['COMPILER_LIBRARY_NAME': scalaCompilerLib,
       'COMPILER_LIBRARY_LEVEL': 'Project',
       'MAXIMUM_HEAP_SIZE': '512',
       'VM_PARAMETERS': '-Xms128m -Xss1m -server'].each{ name, value ->
          scalacSettingsComp.appendNode('option', ['name': name, 'value': value])
      }
      def libraryTableComp = provider.node.appendNode('component')
      libraryTableComp.@name = 'libraryTable'
      def scalaCompilerLibNode = libraryTableComp.appendNode('library')
      scalaCompilerLibNode.@name = scalaCompilerLib
      def scalaCompilerLibClassesNode = scalaCompilerLibNode.appendNode('CLASSES')
      configurations.scalaTools.files.each { scalaCompilerLibJar ->
        scalaCompilerLibClassesNode.appendNode('root', [url: "jar://${scalaCompilerLibJar}!/"])
      }
      def scalaAPILibNode = libraryTableComp.appendNode('library')
      scalaAPILibNode.@name = scalaAPILib
      def scalaAPILibClassesNode = scalaAPILibNode.appendNode('CLASSES')
      configurations.scalaAPI.files.each { scalaAPILibJar ->
        scalaAPILibClassesNode.appendNode('root', [url: "jar://${scalaAPILibJar}!/"])
      }
      //Enable Scala Type-aware highlighting
      def highlightingAdvisorComp = provider.node.appendNode('component')
      highlightingAdvisorComp.@name = 'HighlightingAdvisor'
      ['SUGGEST_TYPE_AWARE_HIGHLIGHTING': 'false',
       'TYPE_AWARE_HIGHLIGHTING_ENABLED': 'true'].each { name, value ->
        highlightingAdvisorComp.appendNode('option', ['name': name, 'value': value])
      }

      //Setup Git root
      def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
      mapping.@vcs = 'Git'
      mapping.@directory = '$PROJECT_DIR$/../..'

      //Make sure IDEA sticks Apache 2.0 preamble for each file
      def comp = provider.node.component.find { it.@name == 'CopyrightManager' }
      comp.@default = 'Apache 2.0'
      def copyright = comp.appendNode('copyright')
      copyright.appendNode('option', [name: 'notice', value: file(licenseFile).text])
      ['keyword': 'Copyright',
       'allowReplaceKeyword': '',
       'myName': 'Apache 2.0',
       'myLocal': 'true'].each { name, value ->
          copyright.appendNode('option', ['name': name, 'value': value])
      }
  }
}

idea.module{
  scopes.COMPILE.minus += configurations.scalaAPI
}

idea.module.iml{
  withXml { provider ->
    //Setup Scala Facet in *.iml file
    def facetComp = provider.node.appendNode('component')
    facetComp.@name = 'FacetManager'
    def facetNode = facetComp.appendNode('facet', [type: 'scala', name: 'Scala'])
    def facetConfNode = facetNode.appendNode('configuration')
    ['compilerLibraryLevel': 'Project',
     'compilerLibraryName': scalaCompilerLib].each {name, value ->
      facetConfNode.appendNode('option', ['name': name, 'value': value])
    }

    def moduleRootManagerComp = provider.node.component.find { it.@name == 'NewModuleRootManager' }
    moduleRootManagerComp.appendNode('orderEntry', [type: 'library', name: scalaAPILib, level: 'project'])
  }
}
